import asyncio
import logging
from datetime import datetime as dt
from datetime import date as d

import orjson
from aiogram import Bot
from aiogram.enums.chat_action import ChatAction
from openai import AsyncOpenAI

from yclients import YClients
from yclients.services.online_bookings_service.models import (
    BookableServicesQueryParams,
    BookableServicesRequest,
    BookableDatesQueryParams,
    BookableDatesRequest,
    BookableTimesQueryParams,
    BookableTimesRequest,
    BookRecordRequestBody,
    BookRecordRequest,
)
from yclients.services.online_bookings_service.models._additional import Appointment
from config.settings import settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

client = AsyncOpenAI(api_key=settings.OPENAI_API_KEY)
assistant_id = settings.OPENAI_ASSISTANT_ID
model = settings.OPENAI_MODEL


class AssistantManager:
    '''–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å YClients API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        client (AsyncOpenAI): –ö–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.
        model (str): –ú–æ–¥–µ–ª—å OpenAI, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        yclients: –ö–ª–∏–µ–Ω—Ç YClients –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API YClients.
        user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_fullname (str): –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_phone (str): –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        assistant_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ OpenAI.
        thread_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (thread) –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        assistant: –û–±—ä–µ–∫—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ OpenAI.
        thread: –¢–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        run: –¢–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫ (run) –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        lock (asyncio.Lock): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π lock –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    '''

    def __init__(self, db, yclients, user_id):
        self.client = client
        self.model = model
        self.db = db
        self.yclients: YClients = yclients
        self.user_id = user_id
        self.user_fullname = None
        self.user_phone = None
        self.assistant_id = assistant_id
        self.thread_id = None
        self.assistant = None
        self.thread = None
        self.run = None
        self.lock = asyncio.Lock()

    @staticmethod
    async def get_datetime_now():
        '''–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ ISO 8601.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DDTHH:MM:SS'.
        '''
        return dt.now().strftime("%Y-%m-%dT%H:%M:%S")

    async def initialize(self):
        '''–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –ø–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str –∏–ª–∏ None: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        '''
        try:
            if self.assistant_id:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤—ã–Ω–µ—Å—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã try –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
                self.assistant = await self.client.beta.assistants.retrieve(assistant_id=self.assistant_id)
                logger.info(f"Assistant {self.assistant_id} initialized successfully")

            user_data = await self.db.get_user_by_telegram_id(self.user_id)
            if user_data and user_data.get('thread_id'):
                self.thread_id = user_data['thread_id']
                self.user_fullname = f'{user_data["surname"]} {user_data["name"]}'
                self.user_phone = user_data['phone']
                # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ API
                self.thread = await self.client.beta.threads.retrieve(thread_id=self.thread_id)
                logger.info(f"Thread {self.thread_id} retrieved for user {self.user_id}")
            else:
                self.thread = await self.client.beta.threads.create()
                self.thread_id = self.thread.id
                # –í—ã–Ω–µ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                await self.db.update_user_thread_id(self.user_id, self.thread_id)
                logger.info(f"New thread {self.thread_id} created for user {self.user_id}")

            return self.thread_id
        except Exception as e:
            logger.error(f"Error initializing assistant for user {self.user_id}: {str(e)}")
            return None

    async def cleanup(self):
        '''–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ).'''
        pass  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

    async def add_message_to_thread_and_run(self, role, content, message, bot: Bot, user_data):
        '''–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ—Ç–æ–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            role (str): –†–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ('user' –∏–ª–∏ 'assistant').
            content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
            message: –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.
            bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        '''
        if self.lock.locked():
            logger.info(f"Run already in progress for user {self.user_id}. Queuing message.")
            return '–û—Ç–≤–µ—á–∞—é –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å ‚ú®. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞... üòä'
        async with self.lock:
            try:
                if not self.thread:
                    await self.initialize()

                await self.cancel_existing_runs()

                await self.client.beta.threads.messages.create(
                    thread_id=self.thread_id,  # type: ignore
                    role=role,
                    content=content,
                )

                current_datetime = await self.get_datetime_now()

                self.run = await self.client.beta.threads.runs.create(
                    thread_id=self.thread_id,  # type: ignore
                    assistant_id=self.assistant_id,  # type: ignore
                    additional_instructions=(
                        f'–ö–ª–∏–µ–Ω—Ç: {self.user_fullname}\n'
                        f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {self.user_phone}\n'
                        f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_datetime}'
                    ),
                )
                logger.info(f"Run started for thread {self.thread_id}")

                return await self.handle_run(bot, message)
            except Exception as e:
                logger.error(f"Error adding message to thread for user {self.user_id}: {str(e)}")
                return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.'

    async def cancel_existing_runs(self):
        '''–û—Ç–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—É—Å–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞.'''
        try:
            runs = await self.client.beta.threads.runs.list(thread_id=self.thread_id)  # type: ignore
            for run in runs.data:
                if run.status not in ('expired', 'cancelled', 'completed'):
                    await self.client.beta.threads.runs.cancel(thread_id=self.thread_id, run_id=run.id)  # type: ignore
                    logger.info(f"Run {run.id} canceled for thread {self.thread_id}")
        except Exception as e:
            logger.error(f"Error canceling runs for thread {self.thread_id}: {str(e)}")

    async def handle_run(self, bot, message):
        '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –æ–∂–∏–¥–∞—è –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
            message: –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        '''
        try:
            while True:
                # –£–º–µ–Ω—å—à–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –∏–∑–±–µ–≥–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
                await asyncio.sleep(1.5)
                run_status = await self.client.beta.threads.runs.retrieve(
                    thread_id=self.thread_id,  # type: ignore
                    run_id=self.run.id,  # type: ignore
                )

                if run_status.status == 'completed':
                    messages = await self.client.beta.threads.messages.list(thread_id=self.thread_id)  # type: ignore
                    last_message = messages.data[0]
                    if last_message.role == 'assistant':
                        message_text = last_message.content[0].text.value  # type: ignore
                        logger.info(f"Assistant response: {message_text}")
                        return message_text
                elif run_status.status == 'requires_action':
                    await self.handle_required_actions(run_status.required_action.submit_tool_outputs)  # type: ignore
                elif run_status.status in ('canceled', 'expired', 'failed'):
                    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.'
        except Exception as e:
            logger.error(
                f"Error handling run for user {self.user_id}, status: {getattr(run_status, 'status', 'unknown')}: {str(e)}"
            )
            return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.'

    async def handle_required_actions(self, required_action):
        '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            required_action: –û–±—ä–µ–∫—Ç —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (RequiredAction).
        '''
        try:
            tool_outputs = []
            for tool_call in required_action.tool_calls:
                function_name = tool_call.function.name
                arguments = orjson.loads(tool_call.function.arguments)
                function_response = await self.call_function(function_name, arguments)
                tool_outputs.append({'tool_call_id': tool_call.id, 'output': function_response})

            await self.client.beta.threads.runs.submit_tool_outputs(
                run_id=self.run.id,  # type: ignore
                thread_id=self.thread_id,  # type: ignore
                tool_outputs=tool_outputs,
            )
            logger.info(f"Tool outputs submitted for run {self.run.id}")  # type: ignore
        except Exception as e:
            logger.error(f"Error handling required actions for run {self.run.id}: {str(e)}")  # type: ignore

    async def call_function(self, function_name, arguments):
        '''–í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –∏–º–µ–Ω–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            function_name (str): –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞.
            arguments (dict): –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            dict –∏–ª–∏ str: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        '''
        try:
            function_mapping = {
                'get_bookable_services': self.get_bookable_services,
                'get_bookable_dates': self.get_bookable_dates,
                'get_bookable_times': self.get_bookable_times,
                'create_book_record': self.create_book_record,
            }

            func = function_mapping.get(function_name)
            if func:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(f"Calling function {function_name} with arguments {arguments}")
                return await func(arguments)
            else:
                logger.warning(f"Function {function_name} not implemented")
                return f"–§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."
        except Exception as e:
            logger.error(f"Error calling function {function_name} with arguments {arguments}: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {function_name}"

    async def get_bookable_services(self, params):
        '''–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥ –∏–∑ YClients API.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏).

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: JSON-—Å—Ç—Ä–æ–∫–∞ —Å —É—Å–ª—É–≥–∞–º–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        '''
        try:
            services_response = await self.yclients.online_bookings.get_bookable_services(
                BookableServicesRequest(
                    query=BookableServicesQueryParams(),
                ),
            )
            if services_response and services_response.success:
                services = services_response.data.services
                services_list = [
                    {'id': service.id, 'name': service.title, 'price_min': service.price_min} for service in services
                ]
                logger.info(f"Bookable services retrieved for user {self.user_id}")
                return orjson.dumps({'services': services_list}).decode('utf-8')
            else:
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥.'}
        except Exception as e:
            logger.error(f"Error getting bookable services for user {self.user_id}: {str(e)}")
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥.'}

    async def get_bookable_dates(self, params):
        '''–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –∏–∑ YClients API.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞, –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–ª—é—á 'service_ids' —Å —Å–ø–∏—Å–∫–æ–º ID —É—Å–ª—É–≥.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–∞–º–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        '''
        try:
            service_ids = params.get('service_ids', [])
            if not service_ids:
                return {'error': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —É—Å–ª—É–≥.'}

            dates_response = await self.yclients.online_bookings.get_bookable_dates(
                BookableDatesRequest(
                    query=BookableDatesQueryParams(service_ids=service_ids),
                ),
            )
            if dates_response and dates_response.success:
                dates = dates_response.data.booking_dates
                dates_list = dates
                logger.info(f"Bookable dates retrieved for services {service_ids} for user {self.user_id}")
                return orjson.dumps({'dates': dates_list}).decode('utf-8')
            else:
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã.'}
        except Exception as e:
            logger.error(f"Error getting bookable dates for user {self.user_id}: {str(e)}")
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã.'}

    async def get_bookable_times(self, params):
        '''–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ —É—Å–ª—É–≥ –∏–∑ YClients API.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞, –æ–∂–∏–¥–∞—é—Ç—Å—è –∫–ª—é—á–∏ 'staff_id', 'date', 'service_ids'.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        '''
        try:
            staff_id = params.get('staff_id')
            date = params.get('date')
            service_ids = params.get('service_ids', [])

            if not staff_id or not date or not service_ids:
                return {'error': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –¥–∞—Ç—É –∏ ID —É—Å–ª—É–≥.'}

            times_response = await self.yclients.online_bookings.get_bookable_times(
                request_model=BookableTimesRequest(
                    query=BookableTimesQueryParams(),
                ),
                staff_id=staff_id,
                date=d.fromisoformat(date),
            )
            if times_response and times_response.success:
                times = times_response.data
                times_list = [{'time': time.time} for time in times]
                logger.info(
                    f"Bookable times retrieved for date {date} and services {service_ids} for user {self.user_id}"
                )
                return orjson.dumps({'times': times_list}).decode('utf-8')
            else:
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è.'}
        except Exception as e:
            logger.error(f"Error getting bookable times for user {self.user_id}: {str(e)}")
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è.'}

    async def create_book_record(self, params):
        '''–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ YClients.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞, –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–ª—é—á 'appointments' —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        '''
        try:
            appointment = params['appointments'][0]
            service_id = appointment.get('id')
            service_datetime = appointment.get('datetime')

            user_data = await self.db.get_user_by_telegram_id(self.user_id)
            if not user_data:
                return {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.'}

            appointment_model = Appointment(
                id=1,
                services=[service_id],
                staff_id=3353649,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                datetime=service_datetime,
            )
            booking_request = BookRecordRequest(
                body=BookRecordRequestBody(
                    phone=user_data['phone'],
                    email='',
                    fullname=f"{user_data['surname']} {user_data['name']} {user_data['patronymic']}",
                    appointments=[appointment_model],
                ),
            )
            booking_response = await self.yclients.online_bookings.create_book_record(booking_request)
            if booking_response and booking_response.success:
                logger.info(f"Booking created for user {self.user_id} at {service_datetime}")
                return orjson.dumps(
                    {'success': True, 'message': f"–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ {service_datetime}."},
                ).decode('utf-8')
            else:
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å.'}
        except Exception as e:
            logger.error(f"Error creating book record for user {self.user_id}: {str(e)}")
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å.'}
