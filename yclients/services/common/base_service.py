import logging
from pydantic import ValidationError
from typing import TypeVar, Generic, Type

from yclients.manager import YClientsManager
from yclients.errors import APIError
from .enums import HTTPMethod
from .models import (
    BaseRequestModel,
    BaseResponseModel,
)

T = TypeVar('T', bound=BaseResponseModel)


class BaseService(Generic[T]):
    '''
    –ë–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API YClients.

    –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.
    '''

    def __init__(self, manager: YClientsManager):
        '''
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å –∑–∞–¥–∞–Ω–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.

        Args:
            manager (YClientsManager): –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ YClientsManager.
        '''
        self.manager = manager
        self.logger = logging.getLogger(self.__class__.__name__)

    async def request_and_parse(
        self,
        method: HTTPMethod,
        endpoint: str,
        request_model: BaseRequestModel | None,
        response_model: Type[T],
        exclude_unset: bool = True,
        use_user_token: bool = True,
    ) -> T:
        '''
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –ø–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –≤ –∑–∞–¥–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å.

        Args:
            method (HTTPMethod): HTTP –º–µ—Ç–æ–¥.
            endpoint (str): –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API.
            request_model (BaseRequestModel | None): –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ None.
            response_model (Type[T]): –ö–ª–∞—Å—Å –º–æ–¥–µ–ª–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
            exclude_unset (bool): –ò—Å–∫–ª—é—á–∞—Ç—å –ª–∏ –Ω–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.
            use_user_token (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            T: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç–∞.

        Raises:
            ValidationError: –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏.
            APIError: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.
            Exception: –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
        '''
        body = (
            request_model.body.model_dump(
                exclude_unset=exclude_unset,
                by_alias=True,
            )
            if request_model and request_model.body
            else None
        )
        query_params = (
            request_model.query.model_dump(
                exclude_unset=exclude_unset,
                by_alias=True,
            )
            if request_model and request_model.query
            else None
        )
        try:
            self.logger.debug(
                f'üèóÔ∏è Preparing request: {method.value} {endpoint}\n' f'\tBody: {body}\n\tQuery Params: {query_params}'
            )

            response_data = await self.manager._make_request(
                method,
                endpoint,
                params=query_params,
                data=body,
                use_user_token=use_user_token,
            )

            parsed_response = response_model(**response_data)
            self.logger.debug(f'‚úÖ Successful API response: {parsed_response}')
            return parsed_response

        except ValidationError as ve:
            self.logger.error(f'Validation Error ({response_model.__name__}): {ve}')
            raise ve

        except APIError as e:
            self.logger.error(f'API Error: {e}')
            raise e

        except Exception as e:
            self.logger.error(f'Unexpected error: {e}')
            raise e
